// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Chingizkhan/url-shortener/internal/domain"
	mock "github.com/stretchr/testify/mock"

	url_repo "github.com/Chingizkhan/url-shortener/internal/repository/url_repo"
)

// UrlRepo is an autogenerated mock type for the UrlRepo type
type UrlRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, link
func (_m *UrlRepo) Delete(ctx context.Context, link string) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindExpired provides a mock function with given fields: ctx, in
func (_m *UrlRepo) FindExpired(ctx context.Context, in url_repo.FindIn) ([]domain.Shortening, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for FindExpired")
	}

	var r0 []domain.Shortening
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, url_repo.FindIn) ([]domain.Shortening, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, url_repo.FindIn) []domain.Shortening); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Shortening)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, url_repo.FindIn) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUrlRepo creates a new instance of UrlRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlRepo {
	mock := &UrlRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
