// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Chingizkhan/url-shortener/internal/domain"
	mock "github.com/stretchr/testify/mock"

	url_repo "github.com/Chingizkhan/url-shortener/internal/repository/url_repo"
)

// UrlRepository is an autogenerated mock type for the UrlRepository type
type UrlRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *UrlRepository) Create(ctx context.Context, in url_repo.CreateIn) (domain.Shortening, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Shortening
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, url_repo.CreateIn) (domain.Shortening, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, url_repo.CreateIn) domain.Shortening); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(domain.Shortening)
	}

	if rf, ok := ret.Get(1).(func(context.Context, url_repo.CreateIn) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, link
func (_m *UrlRepository) Delete(ctx context.Context, link string) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, link
func (_m *UrlRepository) Exists(ctx context.Context, link string) (bool, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *UrlRepository) Get(ctx context.Context, id string) (domain.Shortening, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Shortening
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Shortening, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Shortening); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Shortening)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *UrlRepository) List(ctx context.Context) ([]domain.Shortening, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Shortening
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Shortening, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Shortening); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Shortening)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in
func (_m *UrlRepository) Update(ctx context.Context, in url_repo.UpdateIn) (domain.Shortening, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Shortening
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, url_repo.UpdateIn) (domain.Shortening, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, url_repo.UpdateIn) domain.Shortening); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(domain.Shortening)
	}

	if rf, ok := ret.Get(1).(func(context.Context, url_repo.UpdateIn) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUrlRepository creates a new instance of UrlRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlRepository {
	mock := &UrlRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
